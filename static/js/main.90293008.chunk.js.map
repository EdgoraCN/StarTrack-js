{"version":3,"sources":["components/GitHubAuthBtn.js","utils/GitHubUtils.js","components/GitHubAuthForm.js","components/GitHubAuthContainer.js","components/TopNav.js","components/RepoDetailsDesktopLayout.js","components/RepoDetailsMobileLayout.js","components/RepoDetails.js","components/ChartContainer.js","components/StatsTable.js","components/UrlDisplay.js","shared/ClosableBadge.js","components/Footer.js","utils/StargazerStats.js","utils/StargazerLoader.js","components/MainContainer.js","components/MainPage.js","components/RepoPreloader.js","utils/GATrack.js","components/App.js","serviceWorker.js","index.js"],"names":["GitHubAuthBtn","props","getAccessTokenShortForm","token","accessToken","undefined","substring","smallScreen","useMediaQuery","query","Button","variant","onClick","onLoginClick","icon","faSignInAlt","className","OverlayTrigger","trigger","placement","overlay","Tooltip","storageType","faKey","delay","show","Navbar","Text","onLogoutClick","faSignOutAlt","storageKey","StorageTypes","GitHubUtils","axios","get","this","_prepareRequestHeaders","_setStorageType","setItem","_getStorage","removeItem","ms","Promise","resolve","setTimeout","user","repo","handleProgress","shouldStop","starData","starCount","numOfPages","pageNum","url","replace","getAccessToken","page","_getLastStargazerPage","headers","isLoggedIn","Error","i","data","length","push","x","starred_at","y","response","status","message","getItem","sessionStorage","localStorage","_storage","removeAccessToken","linkHeader","parts","split","section","trim","_getStorageDefault","gitHubUtils","Object","freeze","TokenValidationStatus","GitHubAuthForm","useState","tokenValidationStatus","setTokenValidationStatus","inputToken","useRef","storageTypeCheckbox","handleCallback","handleCloseClick","current","handleClose","useEffect","Modal","onHide","Form","onSubmit","event","preventDefault","validateAndStoreAccessToken","value","checked","then","handleLoginSuccess","catch","Header","closeButton","Title","Body","target","rel","href","Group","controlId","Label","Control","ref","type","placeholder","isInvalid","required","Feedback","Check","inline","id","label","Footer","GitHubAuthContainer","showGitHubAuthForm","setShowGitHubAuthForm","setAccessToken","getStorageType","setStorageType","TopNav","bg","Brand","alt","src","window","location","pathname","width","height","packageJson","version","Nav","Link","faGithub","RepoDetailsDesktopLayout","Row","InputGroup","Prepend","FormControl","userName","aria-label","onKeyPress","handleKeyPress","onPaste","handlePaste","repoName","loadInProgress","disabled","Spinner","as","animation","size","role","aria-hidden","onStopClick","faStopCircle","onGoClick","RepoDetailsMobileLayout","Container","RepoDetails","onRepoDetails","charCode","clipData","gh","clipboardData","getData","protocol","hostname","name","owner","ChartContainer","chartSeries","repos","map","username","stargazerData","chartOptions","chart","zoom","autoScaleYaxis","events","zoomed","chartContext","xaxis","yaxis","onTimeRangeChange","toolbar","tools","reduce","a","k","chartType","customIcons","faChartLine","html","index","class","title","click","onChartTypeChange","faSuperscript","logarithmic","tooltip","format","colors","repoData","color","options","series","StatsTable","onChange","requestToSyncChartTimeRange","Table","bordered","responsive","hover","keys","stats","statName","style","backgroundColor","values","statData","baseUrl","origin","UrlDisplay","urlInput","readOnly","repoDetails","join","Append","select","document","execCommand","faCopy","ClosableBadge","Badge","pill","text","data-testid","onBadgeClose","badgeCookieData","borderColor","faTimesCircle","footerPosition","pageEmpty","sticky","data-size","data-icon","data-show-count","faTwitter","faEnvelope","stargazerStats","dateRange","stargazerDates","cur","Date","min","max","minDate","maxDate","filter","firstStarDate","lastStarDate","numOfDays","Math","floor","getTime","daysWithoutStars","maxStarsPerDay","dayWithMostStars","curSameDays","startDate","prevDate","forEach","stargazerDate","curDate","toFixed","toISOString","slice","StargazerLoader","loadStargazers","colorIndex","calcStats","stargazerLoader","MainContainer","preloadedRepos","setRepos","alert","setAlert","isLoading","loadProgress","loadingStatus","setLoadingStatus","setChartType","onLoadInProgress","progress","requestStopLoading","syncChartTimeRangeWithStats","currentChartTimeRange","showAlert","closeAlert","handleRemoveRepo","ProgressBar","now","animated","async","find","repoIter","getRepoUrl","newTimeRange","reposWithUpdatedStats","flag","MainPage","RepoPreloader","reposToPreload","currentlyLoadingIndex","setLoadProgress","finishedLoading","setFinishedLoading","reposLoaded","setReposLoaded","errors","setErrors","repoToPreload","searchParams","URLSearchParams","search","result","key","iter","parseUrlParams","error","ReactGA","initialize","pageview","initializeGoogleAnalytics","App","exact","path","component","Boolean","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.90293008.chunk.js","sourcesContent":["import React from 'react'\nimport { Button, Navbar, OverlayTrigger, Tooltip } from 'react-bootstrap/'\nimport { useMediaQuery } from 'react-responsive'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSignInAlt, faSignOutAlt, faKey } from '@fortawesome/free-solid-svg-icons'\n\nconst GitHubAuthBtn = (props) => {\n\n  const getAccessTokenShortForm = () => {\n    let token = props.accessToken;\n    if (token !== null && token !== undefined)\n      return token.substring(0, 6);\n    \n    return \"\"\n  }\n\n  const smallScreen = useMediaQuery({ query: '(max-width: 650px)' });\n\n  if (props.accessToken === null || props.accessToken === undefined || props.accessToken === \"\") {\n    return (\n      <Button variant=\"outline-light\" onClick={props.onLoginClick}>\n        {smallScreen ? <FontAwesomeIcon icon={faSignInAlt} className=\"mr-1\"/> : \"GitHub Authentication\"}\n      </Button>\n    )\n  }\n  else {\n    return (\n      <div>\n        {smallScreen ?\n        <OverlayTrigger trigger=\"click\" placement=\"bottom\" overlay={<Tooltip>Access token '{getAccessTokenShortForm()}' stored in {props.storageType}</Tooltip>}>\n          <Button>\n            <FontAwesomeIcon icon={faKey} className=\"mr-1\"/>\n          </Button>\n        </OverlayTrigger>\n        :\n        <OverlayTrigger\n          placement=\"bottom\"\n          delay={{ show: 250 }}\n          overlay={<Tooltip>Access token stored in {props.storageType}</Tooltip>}\n        >\n          <Navbar.Text className=\"mr-2 ml-2\">\n            <FontAwesomeIcon icon={faKey} className=\"mr-1\"/>\n            {getAccessTokenShortForm()}\n          </Navbar.Text>\n        </OverlayTrigger>\n        }\n        <Button variant=\"outline-light\" onClick={props.onLogoutClick}>\n          {smallScreen ? <FontAwesomeIcon icon={faSignOutAlt} className=\"mr-1\"/> : \"Log Out\"}\n        </Button>\n      </div>\n    )\n  }\n}\n\nexport default GitHubAuthBtn","import axios from 'axios'\n\nconst stargazersURL = \"https://api.github.com/repos/{user}/{repo}/stargazers?per_page=100&page={page}\"\nconst validateAccessTokenURL = \"https://api.github.com/user\"\nconst repoUrlTemplate = \"https://github.com/{user}/{repo}\"\n\nconst storageKey = \"statrack_js_access_token\"\n\nconst maxSupportedPagesWithoutAccessToken = 30\n\nexport const StorageTypes = {\n  LocalStorage: 'local storage',\n  SessionStorage: 'session storage'\n}\n\nclass GitHubUtils {\n\n  static _getStorageDefault() {\n    if (sessionStorage.getItem(storageKey) !== null && sessionStorage.getItem(storageKey) !== undefined && sessionStorage.getItem(storageKey) !== \"\") {\n      return sessionStorage\n    }\n    else if (localStorage.getItem(storageKey) !== null && localStorage.getItem(storageKey) !== undefined && localStorage.getItem(storageKey) !== \"\") {\n      return localStorage\n    }\n    else {\n      return sessionStorage\n    }\n  }\n\n  static _storage = GitHubUtils._getStorageDefault();\n\n  async validateAndStoreAccessToken(accessToken, storageType) {\n    try {\n      await axios.get(validateAccessTokenURL, this._prepareRequestHeaders(accessToken));\n      this._setStorageType(storageType).setItem(storageKey, accessToken);\n    }\n    catch (error) {\n      throw error;\n    }\n  }\n\n  removeAccessToken() {\n    this._getStorage().removeItem(storageKey)\n  }\n\n  sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  async loadStargazers(user, repo, handleProgress, shouldStop) {\n    try {\n      let starData = [];\n      let starCount = 1;\n      let numOfPages = 1;\n      let pageNum = 1;\n      handleProgress(0);\n      while (pageNum <= numOfPages) {\n        if (shouldStop()) {\n          return null;\n        }\n        let url = stargazersURL.replace('{page}', pageNum).replace('{user}', user).replace('{repo}', repo);\n        let page = await axios.get(url, this._prepareRequestHeaders(this.getAccessToken()));\n        if (pageNum === 1) {\n          numOfPages = this._getLastStargazerPage(page.headers['link']);\n          if (numOfPages > maxSupportedPagesWithoutAccessToken && !this.isLoggedIn()) {\n            throw Error(\"Cannot load a repo with more than \" + 100 * maxSupportedPagesWithoutAccessToken + \" stars without GitHub access token. Please click \\\"GitHub Authentication\\\" and provide one\")\n          }\n        }\n        handleProgress((pageNum/numOfPages)*100);\n        pageNum++;\n\n        for (let i = 0; i < page.data.length; i++) {\n          starData.push({\n            x: page.data[i].starred_at,\n            y: starCount++\n          })\n        }\n      }\n\n      return starData;\n    }\n    catch(error) {\n      if (error.response === undefined) {\n        throw error\n      }\n      if (error.response.status === 404) {\n        throw Error(\"Repo \" + user + \"/\" + repo + \" Not found\")\n      } else if (error.response.status === 403) {\n        throw Error(\"API rate limit exceeded!\" + (this.isLoggedIn() ? \"\" : \" Please click \\\"GitHub Authentication\\\" and provide GitHub access token to increase rate limit\"));\n      } else {\n        throw Error(\"Couldn't fetch stargazers data, error code \" + error.response.status + \" returned\" + \n          (error.response.data.message && error.response.data.message !== \"\" ? \": \" + error.response.data.message : \"\"))\n      }\n    }\n  }\n\n  getAccessToken() {\n    return this._getStorage().getItem(storageKey);\n  }\n\n  isLoggedIn() {\n    let accessToken = this.getAccessToken();\n    return (accessToken !== null && accessToken !== undefined && accessToken !== \"\");\n  }\n\n  getRepoUrl(user, repo) {\n    return repoUrlTemplate.replace('{user}', user).replace('{repo}', repo);\n  }\n\n  getStorageType() {\n    switch (this._getStorage()) {\n      case sessionStorage:\n        return StorageTypes.SessionStorage;\n      case localStorage:\n        return StorageTypes.LocalStorage;\n      default:\n        return null;\n    }\n  }\n\n  _getStorage() {\n    return GitHubUtils._storage\n  }\n\n  _setStorageType(storageType) {\n    this.removeAccessToken();\n\n    switch (storageType) {\n      case StorageTypes.LocalStorage:\n        GitHubUtils._storage = localStorage;\n        break;\n      case StorageTypes.SessionStorage:\n        GitHubUtils._storage = sessionStorage\n        break;\n      default:\n        GitHubUtils._storage = sessionStorage\n    }\n\n    return GitHubUtils._storage\n  }\n\n  _prepareRequestHeaders(accessToken) {\n    return {\n      headers: {\n        'Accept': 'application/vnd.github.v3.star+json',\n        ...accessToken !== undefined && accessToken !== null && accessToken !== \"\" && {'Authorization': 'token ' + accessToken},\n      }\n    };\n\n  }\n\n  _getLastStargazerPage(linkHeader) {\n    if (linkHeader === undefined || linkHeader.length === 0) {\n      return 1;\n    }\n  \n    // Split parts by comma\n    var parts = linkHeader.split(',');\n  \n    // Parse each part into a named link\n    for (let i in parts) {\n      var section = parts[i].split(';');\n      if (section.length !== 2) {\n        continue;\n      }\n  \n      var url = section[0].replace(/<(.*)>/, '$1').trim();\n      var name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n  \n      // if name is 'last' then extract page and return it\n      if (name === 'last') {\n        return url.replace(/(.*)&page=(.*)/, '$2').trim();\n      }\n    }\n  }\n\n}\n\nconst gitHubUtils = new GitHubUtils();\nObject.freeze(gitHubUtils);\n\nexport default gitHubUtils;","import React, { useState, useRef, useEffect } from 'react'\nimport { Modal, Button, Form } from 'react-bootstrap/'\nimport gitHubUtils, { StorageTypes } from '../utils/GitHubUtils'\n\nconst TokenValidationStatus = {\n  Init: \"init\",\n  Valid: \"valid\",\n  Invalid: \"invalid\",\n  DidNotCheck: \"did-not-check\"\n}\n\nconst GitHubAuthForm = (props) => {\n\n  const [tokenValidationStatus, setTokenValidationStatus] = useState(TokenValidationStatus.Init);\n\n  const inputToken = useRef();\n  const storageTypeCheckbox = useRef();\n  const handleCallback = useRef();\n\n  const getStorageTypeDecision = () => {\n    if (storageTypeCheckbox.current.checked) {\n      return StorageTypes.LocalStorage\n    }\n\n    return StorageTypes.SessionStorage\n  }\n\n  const handleLoginClick = (event) => {\n    event.preventDefault();\n\n    gitHubUtils.validateAndStoreAccessToken(inputToken.current.value, getStorageTypeDecision())\n    .then( () => {\n      handleCallback.current = props.handleLoginSuccess;\n      setTokenValidationStatus(TokenValidationStatus.Valid);\n    })\n    .catch(() => {\n      handleCallback.current = null;\n      setTokenValidationStatus(TokenValidationStatus.Invalid);\n    })\n  }\n\n  const handleCloseClick = () => {\n    handleCallback.current = props.handleClose;\n    setTokenValidationStatus(TokenValidationStatus.DidNotCheck);\n  }\n\n  useEffect(() => {\n    if (handleCallback.current !== null && handleCallback.current !== undefined) {\n      handleCallback.current();\n      setTokenValidationStatus(TokenValidationStatus.Init);\n    }\n  }, [tokenValidationStatus])\n\n  return (\n    <Modal show={props.show} onHide={handleCloseClick}>\n      <Form onSubmit={handleLoginClick}>\n        <Modal.Header closeButton>\n          <Modal.Title>GitHub Authentication</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p>GitHub API <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://developer.github.com/v3/#rate-limiting\">rate limiter</a> makes it \n            impossible to collect stargazer data on repos with more than 3000 stars without GitHub authentication.\n          </p>\n          <p>If you'd like to view stargazer data for this repo, please provide your GitHub auth details.</p>\n          <p>Please note these credentials aren't stored in any server. This application is based on pure javascript \n            so the credentials are only used to send authenticated requests to GitHub API.\n          </p>\n          <Form.Group controlId=\"githubAuthenticationForm\">\n            <Form.Label>GitHub access token (generate one <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/settings/tokens\">here</a>)</Form.Label>\n            <Form.Control ref={inputToken} type=\"text\" placeholder=\"fc516773214acf13d10f856c6b80037999da4fd3\" isInvalid={tokenValidationStatus === TokenValidationStatus.Invalid} required/>\n            <Form.Control.Feedback type=\"invalid\">\n              Access token is invalid.\n            </Form.Control.Feedback>\n            <Form.Text className=\"text-muted\">\n              These credentials aren't stored in any server.\n            </Form.Text>\n            <Form.Check ref={storageTypeCheckbox} inline type=\"checkbox\" id=\"storageType\" label=\"Save access token in local storage\" />\n            <Form.Label><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://stackoverflow.com/questions/5523140/html5-local-storage-vs-session-storage\">Learn more</a></Form.Label>\n          </Form.Group>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleCloseClick}>\n            Close\n          </Button>\n          <Button variant=\"primary\" type=\"submit\">\n            Login\n          </Button>\n        </Modal.Footer>\n        </Form>\n    </Modal>    \n  )\n}\n\nexport default GitHubAuthForm","import React, { useState } from 'react'\nimport GitHubAuthBtn from './GitHubAuthBtn'\nimport GitHubAuthForm from './GitHubAuthForm'\nimport gitHubUtils from '../utils/GitHubUtils'\n\nconst GitHubAuthContainer = () => {\n\n  const [showGitHubAuthForm, setShowGitHubAuthForm] = useState(false);\n  const [accessToken, setAccessToken] = useState(gitHubUtils.getAccessToken());\n  const [storageType, setStorageType] = useState(gitHubUtils.getStorageType());\n\n  const openGitHubAuthForm = () => {\n    setShowGitHubAuthForm(true);\n  }\n\n  const hideGitHubAuthForm = () => {\n    setShowGitHubAuthForm(false);\n    setAccessToken(gitHubUtils.getAccessToken());\n    setStorageType(gitHubUtils.getStorageType());\n  }\n\n  const handleLoginSuccess = () => {\n    setShowGitHubAuthForm(false);\n    setAccessToken(gitHubUtils.getAccessToken());\n    setStorageType(gitHubUtils.getStorageType());\n  }\n\n  const handleLogOut = () => {\n    gitHubUtils.removeAccessToken();\n    setAccessToken(gitHubUtils.getAccessToken());\n    setStorageType(gitHubUtils.getStorageType());\n  }  \n\n  return (\n    <div>\n      <GitHubAuthBtn onLoginClick={openGitHubAuthForm} onLogoutClick={handleLogOut} accessToken={accessToken} storageType={storageType}/>\n      <GitHubAuthForm show={showGitHubAuthForm} handleClose={hideGitHubAuthForm} handleLoginSuccess={handleLoginSuccess}/>\n    </div>\n  )\n}\n\nexport default GitHubAuthContainer","import React from 'react'\nimport { Nav, Navbar } from 'react-bootstrap/'\nimport GitHubAuthContainer from './GitHubAuthContainer'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithub } from '@fortawesome/free-brands-svg-icons'\nimport packageJson from '../../package.json'\nimport { useMediaQuery } from 'react-responsive'\n\nconst starTrackGitHubRepo = \"https://github.com/seladb/startrack-js\"\n\nconst TopNav = () => {\n\n  const smallScreen = useMediaQuery({ query: '(max-width: 650px)' });\n\n  return (\n    <Navbar bg=\"primary\" variant=\"dark\">\n      <Navbar.Brand href=\"#/\">\n        <img\n          alt=\"\"\n          src={window.location.pathname + \"star-icon.png\"}\n          width=\"30\"\n          height=\"30\"\n          className=\"d-inline-block align-top\"\n        />{' '}\n        StarTrack v{packageJson.version}\n      </Navbar.Brand>\n      <Nav className=\"mr-auto\"/>\n      <Nav>\n        <Nav.Link href={starTrackGitHubRepo} target=\"_blank\" rel=\"noopener noreferrer\">\n          <FontAwesomeIcon icon={faGithub} className=\"mr-1\"/>\n          {!smallScreen ? \"Project On GitHub\" : \"\"}\n        </Nav.Link>\n      </Nav>\n      <GitHubAuthContainer/>\n    </Navbar>\n  )\n}\n\nexport default TopNav;","import React from 'react'\nimport './RepoDetailsDesktopLayout.css'\nimport './RepoDetails.css'\nimport { Row, InputGroup, FormControl, Button, Spinner, OverlayTrigger, Tooltip } from 'react-bootstrap/'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faStopCircle } from '@fortawesome/free-solid-svg-icons';\n\nconst RepoDetailsDesktopLayout = (props) => {\n\n  return (\n    <Row>\n      <InputGroup>\n        <InputGroup.Prepend>\n          <OverlayTrigger\n            placement=\"bottom\"\n            delay={{ show: 100 }}\n            overlay={<Tooltip>Tip: you can paste any GitHub URL or string in the format of \"username/repo\"</Tooltip>}\n          >\n            <InputGroup.Text>Repo Details</InputGroup.Text>\n          </OverlayTrigger>\n        </InputGroup.Prepend>\n        <FormControl\n          ref={props.userName}\n          placeholder=\"Username\"\n          aria-label=\"Username\"\n          onKeyPress={props.handleKeyPress}\n          onPaste={props.handlePaste}\n        />\n        <InputGroup.Prepend>\n          <InputGroup.Text>/</InputGroup.Text>\n        </InputGroup.Prepend>\n        <FormControl\n          ref={props.repoName}\n          placeholder=\"Repo name\"\n          aria-label=\"Repo name\"\n          onKeyPress={props.handleKeyPress}\n          onPaste={props.handlePaste}\n        />\n        {!props.loadInProgress ?\n        <Button\n          className=\"RepoDetailsDesktopLayout-goButton\"\n          type=\"button\" \n          onClick={props.onGoClick}>Go!\n        </Button>\n        :\n        <div>\n          <Button \n            className=\"RepoDetailsDesktopLayout-loadingButton\"\n            type=\"button\" \n            disabled>\n              <Spinner\n                as=\"span\"\n                animation=\"border\"\n                size=\"sm\"\n                role=\"status\"\n                aria-hidden=\"true\"\n            /> Loading...\n          </Button>\n          <Button className=\"RepoDetails-stopButton\" onClick={props.onStopClick}>\n            <FontAwesomeIcon icon={faStopCircle} />\n          </Button>\n        </div>\n        }\n      </InputGroup>\n    </Row>\n  )\n}\n\nexport default RepoDetailsDesktopLayout","import React from 'react'\nimport './RepoDetailsMobileLayout.css'\nimport './RepoDetails.css'\nimport { Row, FormControl, Button, Spinner, Container, Form } from 'react-bootstrap/'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faStopCircle } from '@fortawesome/free-solid-svg-icons';\n\nconst RepoDetailsMobileLayout = (props) => {\n\n  return (\n    <Container>\n      <Row>\n        <Form.Label className=\"RepoDetailsMobileLayout-headline\">Repo Details</Form.Label>\n      </Row>\n      <Row>\n        <FormControl\n          ref={props.userName}\n          placeholder=\"Username\"\n          aria-label=\"Username\"\n          onKeyPress={props.handleKeyPress}\n          onPaste={props.handlePaste}\n        />\n      </Row>\n      <Row>\n        <FormControl\n          ref={props.repoName}\n          placeholder=\"Repo name\"\n          aria-label=\"Repo name\"\n          onKeyPress={props.handleKeyPress}\n          onPaste={props.handlePaste}\n        />\n      </Row>\n      <Row>\n        {!props.loadInProgress ?\n        <Button\n          className=\"RepoDetailsMobileLayout-goButton\"\n          type=\"button\" \n          onClick={props.onGoClick}>Go!\n        </Button>\n        :\n        <div className=\"RepoDetailsMobileLayout-loadingDiv\">\n          <Button \n            className=\"RepoDetailsMobileLayout-loadingButton\"\n            type=\"button\" \n            disabled>\n              <Spinner\n                as=\"span\"\n                animation=\"border\"\n                size=\"sm\"\n                role=\"status\"\n                aria-hidden=\"true\"\n            /> Loading...\n          </Button>\n          <Button className=\"RepoDetails-stopButton\" onClick={props.onStopClick}>\n            <FontAwesomeIcon icon={faStopCircle} />\n          </Button>\n        </div>\n        }\n      </Row>\n    </Container>\n\n    \n    \n  )\n}\n\nexport default RepoDetailsMobileLayout\n","import React, { useRef } from 'react'\nimport './RepoDetails.css'\nimport RepoDetailsDesktopLayout from './RepoDetailsDesktopLayout'\nimport RepoDetailsMobileLayout from './RepoDetailsMobileLayout'\nimport { useMediaQuery } from 'react-responsive'\nimport { Container } from 'react-bootstrap/'\nimport gh from 'parse-github-url'\n\nconst RepoDetails = (props) => {\n\n  const repoName = useRef();\n  const userName = useRef();\n\n  const onGoClick = () => {\n    props.onRepoDetails(userName.current.value.trim(), repoName.current.value.trim())\n  }\n\n  const handleKeyPress = (target) => {\n    if(target.charCode === 13 && !props.loadInProgress){\n      onGoClick();\n    } \n  }\n\n  const handlePaste = (event) => {\n    let clipData = gh(event.clipboardData.getData('Text'));\n    if (!clipData) {\n      return\n    }\n    \n    if ((clipData.protocol === \"https:\" && clipData.hostname === \"github.com\" && clipData.name !== null && clipData.owner !== null) ||\n          (clipData.protocol === null && clipData.hostname === null && clipData.name !== null && clipData.owner !== null )) {\n      event.preventDefault();\n      userName.current.value = clipData.owner;\n      repoName.current.value = clipData.name\n    }\n  }\n\n  const smallScreen = useMediaQuery({ query: '(max-width: 520px)' });\n\n  return (\n    <Container className=\"RepoDetails-container\">\n      {smallScreen ?\n      <RepoDetailsMobileLayout userName={userName} repoName={repoName} onGoClick={onGoClick} handleKeyPress={handleKeyPress} handlePaste={handlePaste} loadInProgress={props.loadInProgress} onStopClick={props.onStopClick}/>\n      :\n      <RepoDetailsDesktopLayout userName={userName} repoName={repoName} onGoClick={onGoClick} handleKeyPress={handleKeyPress} handlePaste={handlePaste} loadInProgress={props.loadInProgress} onStopClick={props.onStopClick}/>\n      }\n    </Container>\n  )\n}\n\nexport default RepoDetails\n","import React from 'react'\nimport { Container } from 'react-bootstrap/'\nimport ReactApexChart from 'react-apexcharts'\nimport { icon } from '@fortawesome/fontawesome-svg-core'\nimport { faChartLine, faSuperscript } from '@fortawesome/free-solid-svg-icons'\n\nexport const LINEAR = 'linear';\nexport const LOGSCALE = 'logscale';\n\nconst ChartContainer = (props) => {\n\n  const chartSeries = props.repos.map( ({ username, repo, stargazerData }) => {\n    return {\n      name: username + \"/\" + repo,\n      data: stargazerData,\n    }\n  })\n\n  const onZoom = (chartContext, { xaxis, yaxis }) => {\n    if (props.onTimeRangeChange) {\n      props.onTimeRangeChange(xaxis);\n    }\n  }\n\n  const chartOptions = {\n    chart: {\n      id: \"stargazers\",\n      zoom: {\n        autoScaleYaxis: (props.repos.length > 1 ? false : true),\n      },\n      events: {\n        zoomed: onZoom\n      },\n      toolbar: {\n        tools: {\n          // disable zoom and pan tools in log mode, see\n          // https://github.com/seladb/StarTrack-js/issues/15#issuecomment-646945288\n          ...[\"zoom\", \"zoomin\", \"zoomout\", \"pan\", \"reset\"].reduce((a, k) => {\n            a[k] = props.chartType === LINEAR;\n            return a\n          }, {}),\n          customIcons: [\n            {\n              icon: icon(faChartLine).html,\n              index: -2,\n              class: `chart-fa-icon mr-1 ml-3 ${props.chartType === LINEAR ? \"text-primary\" : \"\"}`,\n              title: \"Use linear scale\",\n              click () {\n                props.onChartTypeChange(LINEAR);\n              }\n            },\n            {\n              icon: icon(faSuperscript).html,\n              index: -1,\n              class: `chart-fa-icon mr-2 ${props.chartType === LOGSCALE ? \"text-primary\" : \"\"}`,\n              title: \"Use logarithmic scale\",\n              click () {\n                props.onChartTypeChange(LOGSCALE);\n              }\n            },\n          ],\n        },\n      },\n    },\n    yaxis: {\n      logarithmic: props.chartType === LOGSCALE,\n    },\n    xaxis: {\n      type: \"datetime\"\n    },\n    tooltip: {\n      x: {\n        format: \"dd MMM yyyy\",\n      },\n    },\n    colors: props.repos.map( (repoData) => {\n      return repoData.color\n    }),\n  }\n\n  return (\n    <Container className=\"mt-5\">\n      <ReactApexChart\n        options={chartOptions}\n        series={chartSeries}\n        type=\"line\"\n      />\n    </Container>\n  )\n}\n\nexport default ChartContainer\n","import React from 'react'\nimport { Table, Container, Form } from 'react-bootstrap/'\nimport './StatsTable.css'\n\nconst StatsTable = (props) => {\n\n  const onSyncCheckBoxChanged = (event) => {\n    if (props.requestToSyncChartTimeRange) {\n      props.requestToSyncChartTimeRange(event.target.checked);\n    }\n  }\n\n  return (\n    <Container className=\"StatsTable-topContainer\">\n      <h3>Repo stats:</h3>\n      <Form className=\"mb-3\">\n        <Form.Check type=\"checkbox\" label=\"Sync stats to chart zoom level\" onChange={onSyncCheckBoxChanged}/>\n      </Form>\n      <Table bordered responsive hover>\n        <thead>\n          <tr className=\"StatsTable-header\">\n            <th/>\n            { Object.keys(props.repos[0].stats).map( statName => \n              <th>{statName}</th> \n            )}\n          </tr>\n        </thead>\n        <tbody>\n          { props.repos.map( repoData => \n            <tr className=\"StatsTable-row\" style={{backgroundColor: repoData.color}}>\n              <th>{repoData.username + \" / \" + repoData.repo}</th>\n              { Object.values(repoData.stats).map( statData => \n                <th>{statData}</th>\n              )}\n            </tr>\n          )}\n\n        </tbody>\n      </Table>\n    </Container>\n  )\n}\n\nexport default StatsTable","import React, { useRef } from 'react'\nimport { InputGroup, FormControl, Button, OverlayTrigger, Tooltip } from 'react-bootstrap/'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCopy } from '@fortawesome/free-solid-svg-icons';\n\nconst repoUrlParam = \"r={user},{repo}\";\nconst baseUrl = window.location.origin + window.location.pathname + \"#/preload?\";\n\nconst UrlDisplay = (props) => {\n\n  const urlInput = useRef();\n\n  const buildURL = () => {\n    if (props.repos === undefined || props.repos === null || props.repos.length === 0) {\n      return \"\";\n    }\n\n    return baseUrl + \n      props.repos.map(repoDetails => \n        repoUrlParam.replace(\"{user}\", repoDetails.username).replace(\"{repo}\", repoDetails.repo)\n      )\n      .join(\"&\")\n  }\n\n  const copyToClipboard = () => {\n    urlInput.current.select();\n    document.execCommand(\"copy\");\n  }\n\n  return (\n    <InputGroup className=\"mb-3 mt-5\">\n      <InputGroup.Prepend>\n        <InputGroup.Text id=\"url\">URL</InputGroup.Text>\n      </InputGroup.Prepend>\n      <FormControl\n        readOnly\n        aria-label=\"URL\"\n        value={buildURL()}\n        ref={urlInput}\n      />\n      <InputGroup.Append>\n        <OverlayTrigger\n          placement=\"right\"\n          delay={{ show: 250 }}\n          overlay={<Tooltip>Copy URL</Tooltip>}\n        >\n          <Button variant=\"outline-secondary\" onClick={copyToClipboard}>\n            <FontAwesomeIcon icon={faCopy} />\n          </Button>\n        </OverlayTrigger>\n        </InputGroup.Append>\n    </InputGroup>\n  )\n}\n\nexport default UrlDisplay","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons';\nimport { Badge, Button } from 'react-bootstrap/'\nimport './ClosableBadge.css'\n\nconst ClosableBadge = (props) => {\n\n  const handleBadgeClose = () => {\n    props.onBadgeClose(props.badgeCookieData)\n  }\n\n  return (\n    <h5>\n      <Badge pill variant=\"primary\" style={{backgroundColor: props.color}}>\n        {props.href !== undefined && props.href !== null ? <a className=\"ClosableBadge-Link\" target=\"_blank\" rel=\"noopener noreferrer\" href={props.href}>{props.text}</a> : props.text}\n        <Button data-testid=\"close-button\" size=\"sm\" onClick={handleBadgeClose} style={{backgroundColor: props.color, borderColor: props.color}}>\n          <FontAwesomeIcon icon={faTimesCircle} />\n          </Button>\n      </Badge>\n    </h5>\n  )\n}\n\nexport default ClosableBadge","import React from 'react'\nimport { Navbar, Nav } from 'react-bootstrap/'\nimport GitHubButton from 'react-github-btn'\nimport { useMediaQuery } from 'react-responsive'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithub, faTwitter } from '@fortawesome/free-brands-svg-icons'\nimport { faEnvelope } from '@fortawesome/free-solid-svg-icons';\n\n\nconst starTrackGitHubRepo = \"https://github.com/seladb/startrack-js\"\nconst seladbGitHubUser = \"https://github.com/seladb\"\nconst seladbTwitter = \"https://twitter.com/seladb\"\nconst seladbEmail = \"mailto:pcapplusplus@gmail.com\"\n\nconst Footer = (props) => {\n\n  let footerPosition = props.pageEmpty ? \"fixed-bottom\" : \"\";\n\n  const smallScreen = useMediaQuery({ query: '(max-width: 530px)' });\n  \n  return (\n    <Navbar bg=\"light\" sticky=\"bottom\" className={footerPosition}>\n      {!smallScreen ? <Navbar.Text className=\"mr-2\">Created by</Navbar.Text> : \"\"}\n      <GitHubButton href={seladbGitHubUser} data-size=\"large\" aria-label=\"@seladb\">@seladb</GitHubButton>\n      {!smallScreen ? <Navbar.Text className=\"ml-2 mr-2\">Give us a star:</Navbar.Text> : <Navbar.Text className=\"ml-2 mr-2\"></Navbar.Text>}\n      <GitHubButton \n        href={starTrackGitHubRepo} \n        data-icon=\"octicon-star\" \n        data-size=\"large\" \n        data-show-count=\"true\" \n        aria-label=\"Star StarTrack on GitHub\"\n      >Star</GitHubButton>\n      <Nav className=\"mr-auto\"/>\n      <Nav>\n        <Nav.Link href={seladbGitHubUser} target=\"_blank\" rel=\"noopener noreferrer\">\n          <FontAwesomeIcon icon={faGithub} className=\"mr-1\"/>\n        </Nav.Link>\n        <Nav.Link href={seladbTwitter} target=\"_blank\" rel=\"noopener noreferrer\">\n          <FontAwesomeIcon icon={faTwitter} className=\"mr-1\"/>\n        </Nav.Link>\n        <Nav.Link href={seladbEmail} target=\"_blank\" rel=\"noopener noreferrer\">\n          <FontAwesomeIcon icon={faEnvelope} className=\"mr-1\"/>\n        </Nav.Link>\n      </Nav>\n    </Navbar>\n  )\n}\n\nexport default Footer","class StargazerStats {\n\n  calcStats(stargazerData, dateRange) {\n    let stargazerDates = stargazerData.map(cur => new Date(cur.x));\n    if (dateRange && dateRange.min !== undefined && dateRange.max !== undefined) {\n      let minDate = new Date(dateRange.min);\n      let maxDate = new Date(dateRange.max);\n      stargazerDates = stargazerDates.filter(cur => cur >= minDate && cur <= maxDate);\n    }\n\n    if (stargazerDates.length === 0) {\n      return {\n        'Number of stars': 0,\n        'Number of days': 0,\n        'Average stars per day': 0,\n        'Average days per star': 0,\n        'Days with stars': 0,\n        'Max stars in one day': 0,\n        'Day with most stars': 0\n      }\n    }\n\n    let firstStarDate = stargazerDates[0];\n    let lastStarDate = stargazerDates[stargazerDates.length-1];\n    let numOfDays = stargazerDates.length === 1 ? 1 : Math.floor((lastStarDate.getTime() - firstStarDate.getTime())/1000/60/60/24);\n    let daysWithoutStars = 0;\n    let maxStarsPerDay = 0;\n    let dayWithMostStars = stargazerDates[0];\n    let curSameDays = 1;\n    let startDate = Math.floor(stargazerDates[0]/1000/60/60/24 - 1);\n    let prevDate = startDate;\n    stargazerDates.forEach(stargazerDate => {\n      let curDate = Math.floor(stargazerDate/1000/60/60/24);\n  \n      if (curDate === prevDate) {\n        curSameDays += 1;\n      }\n      else {\n        if (prevDate !== startDate) {\n          daysWithoutStars += curDate - prevDate - 1;\n        }\n  \n        if (curSameDays > maxStarsPerDay) {\n          maxStarsPerDay = curSameDays;\n          dayWithMostStars = new Date(prevDate*1000*60*60*24);\n        }\n  \n        curSameDays = 1;\n      }\n  \n      prevDate = curDate;\n    });\n\n    return {\n      'Number of stars': stargazerDates.length,\n      'Number of days': numOfDays,\n      'Average stars per day': (stargazerDates.length / numOfDays).toFixed(3),\n      'Average days per star': (numOfDays / stargazerDates.length).toFixed(3),\n      'Days with stars': numOfDays - daysWithoutStars,\n      'Max stars in one day': maxStarsPerDay,\n      'Day with most stars': dayWithMostStars.toISOString().slice(0, 10)\n    }\n  }\n}\n\nconst stargazerStats = new StargazerStats();\nObject.freeze(stargazerStats);\n\nexport default stargazerStats;\n","import gitHubUtils from './GitHubUtils'\nimport stargazerStats from './StargazerStats'\n\nconst colors = [ '#008FFB', '#00E396', '#FEB019', '#FF4560', '#775DD0', '#F86624', '#00B1F2', '#5A2A27' ]\n\nexport const maxReposAllowed = 8;\n\nclass StargazerLoader {\n  static colorIndex = -1\n\n  async loadStargazers(username, repo, handleProgress, shouldStop) {\n    let stargazerData = await gitHubUtils.loadStargazers(username, repo, handleProgress, shouldStop);\n    if (stargazerData === null) {\n      return null;\n    }\n    StargazerLoader.colorIndex = (StargazerLoader.colorIndex + 1 === colors.length ? 0 : StargazerLoader.colorIndex + 1);\n    return {\n      username: username,\n      repo: repo,\n      color: colors[StargazerLoader.colorIndex],\n      stargazerData: stargazerData,\n      stats: stargazerStats.calcStats(stargazerData)\n    }\n  }\n}\n\nconst stargazerLoader = new StargazerLoader();\nObject.freeze(stargazerLoader);\n\nexport default stargazerLoader\n\n\n","import React, { useState, useRef } from 'react'\nimport { Button, Modal, ProgressBar, Container } from 'react-bootstrap/'\nimport './MainContainer.css'\nimport RepoDetails from './RepoDetails'\nimport ChartContainer, { LINEAR } from './ChartContainer'\nimport StatsTable from './StatsTable'\nimport UrlDisplay from './UrlDisplay'\nimport ClosableBadge from '../shared/ClosableBadge'\nimport Footer from './Footer'\nimport stargazerLoader, { maxReposAllowed } from '../utils/StargazerLoader'\nimport stargazerStats from './../utils/StargazerStats'\nimport gitHubUtils from '../utils/GitHubUtils'\n\nconst MainContainer = (props) => {\n\n  const [repos, setRepos] = useState(props.preloadedRepos ? props.preloadedRepos : []);\n  \n  const [alert, setAlert] = useState({\n    show: false, \n    title: \"\", \n    message: \"\"\n  });\n  \n  const [loadingStatus, setLoadingStatus] = useState({\n    isLoading: false,\n    loadProgress: 0,\n  });\n\n  const [chartType, setChartType] = useState(LINEAR);\n\n  const onLoadInProgress = (progress) => {\n    setLoadingStatus({\n      isLoading: true,\n      loadProgress: progress,\n    })\n  }\n\n  const requestStopLoading = useRef();\n  const syncChartTimeRangeWithStats = useRef(false);\n  const currentChartTimeRange = useRef(null);\n\n  const showAlert = (title, message) => {\n    setAlert({\n      show: true,\n      title: title,\n      message: message\n    })\n  }\n\n  const closeAlert =() => {\n    setAlert({\n      show: false,\n      title: \"\",\n      message: \"\"\n    });\n  }\n\n  const getRepoStargazers = async (username, repo) => {\n    if (!username || username === \"\" || !repo || repo === \"\") {\n      showAlert(\"Missing details\", \"Please provide both Username and Repo name\");\n      return;\n    }\n\n    if (repos.find(repoIter => repoIter.username === username && repoIter.repo === repo) !== undefined) {\n      showAlert(\"Repo exists\", \"Repo already exists\");\n      return;\n    }\n\n    if (repos.length + 1 > maxReposAllowed) {\n      showAlert(\"Reached max number of repos allowed\", \"Maximum repos that can be shown at the same time is \" + maxReposAllowed);\n      return;\n    }\n\n    requestStopLoading.current = false;\n\n    try {\n      let stargazerData = await stargazerLoader.loadStargazers(\n        username, \n        repo, \n        onLoadInProgress,\n        () => requestStopLoading.current);\n      \n      if (stargazerData !== null) {\n        setRepos([...repos, stargazerData]);\n      }\n\n      setLoadingStatus({\n        isLoading: false,\n        loadProgress: 0,\n      })\n    }\n    catch(error) {\n      showAlert(\"Error loading stargazers\", error.message);\n      setLoadingStatus({\n        isLoading: false,\n        loadProgress: 0\n      });\n    }\n\n    requestStopLoading.current = false;\n  }\n\n  const handleStopLoading = () => {\n    requestStopLoading.current = true\n  }\n\n  const handleRemoveRepo = (repoDetails) => {\n    setRepos(repos.filter(repo => {\n      return repo.username !== repoDetails.username || repo.repo !== repoDetails.repo;\n    }));\n  }\n\n  const handleChartTimeRangeChange = (newTimeRange) => {\n    currentChartTimeRange.current = newTimeRange;\n    if (syncChartTimeRangeWithStats.current) {\n      let reposWithUpdatedStats = repos.slice();\n      for (let index = 0; index < reposWithUpdatedStats.length; index++) {\n        reposWithUpdatedStats[index].stats = stargazerStats.calcStats(reposWithUpdatedStats[index].stargazerData, syncChartTimeRangeWithStats.current ? currentChartTimeRange.current : null);\n      }\n  \n      setRepos(reposWithUpdatedStats);\n    }\n  }\n\n  const handleRequestToSyncChartTimeRange = (flag) => {\n    syncChartTimeRangeWithStats.current = flag;\n    let reposWithUpdatedStats = repos.slice();\n    for (let index = 0; index < reposWithUpdatedStats.length; index++) {\n      reposWithUpdatedStats[index].stats = stargazerStats.calcStats(reposWithUpdatedStats[index].stargazerData, flag ? currentChartTimeRange.current : null);\n    }\n\n    setRepos(reposWithUpdatedStats);\n  }\n\n  return (\n    <div>\n      { loadingStatus.isLoading ? <ProgressBar now={loadingStatus.loadProgress} variant=\"success\" animated /> : <div className=\"progress MainContainer-progressBarPlaceholder\"/> }\n      <RepoDetails \n        onRepoDetails={getRepoStargazers}\n        loadInProgress={loadingStatus.isLoading}\n        onStopClick={handleStopLoading}\n      />\n      <Container>\n        <div className=\"MainContainer-closableBadgesWrapper\">\n          { repos.map( repoData => \n            <div className=\"MainContainer-closableBadgeContainer\">\n              <ClosableBadge \n                text={repoData.username + \"/\" + repoData.repo} \n                badgeCookieData={{username: repoData.username, repo: repoData.repo}}\n                onBadgeClose={handleRemoveRepo}\n                color={repoData.color}\n                href={gitHubUtils.getRepoUrl(repoData.username, repoData.repo)}\n              />\n            </div>\n          )}\n        </div>\n      </Container>\n      { repos.length > 0 ? <ChartContainer repos={repos} onTimeRangeChange={handleChartTimeRangeChange} chartType={chartType} onChartTypeChange={setChartType}/> : null }\n      { repos.length > 0 ? <Container><StatsTable repos={repos} requestToSyncChartTimeRange={handleRequestToSyncChartTimeRange}/></Container> : null }\n      { repos.length > 0 ? <Container><UrlDisplay repos={repos}/></Container> : null }\n      <Footer pageEmpty={repos.length === 0}/>\n      <Modal show={alert.show} onHide={closeAlert}>\n        <Modal.Header closeButton>\n          <Modal.Title>{alert.title}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>{alert.message}</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={closeAlert}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  )\n}\n\nexport default MainContainer\n","import React from 'react'\nimport TopNav from './TopNav'\nimport MainContainer from './MainContainer'\n\nconst MainPage = (props) => {\n  return (\n    <div>\n      <TopNav />\n      <MainContainer preloadedRepos={props.preloadedRepos} />\n    </div>\n  )\n}\n\nexport default MainPage","import React, { useState, useEffect, useRef } from 'react'\nimport { Container, ProgressBar, Button } from 'react-bootstrap/'\nimport './RepoPreloader.css'\nimport stargazerLoader, { maxReposAllowed } from '../utils/StargazerLoader'\nimport MainPage from './MainPage'\n\nconst RepoPreloader = (props) => {\n\n  const parseUrlParams = () => {\n    let searchParams = new URLSearchParams(props.location.search);\n    let result = [];\n    searchParams.forEach( (value, key) => {\n      if (key === \"r\") {\n        let repo = value.split(\",\");\n        if (result.length < maxReposAllowed &&\n            repo.length === 2 && \n            result.find(iter => iter.username === repo[0] && iter.repo === repo[1]) === undefined) {\n          result.push({\n            username: repo[0],\n            repo: repo[1]\n          })\n        }\n      }\n    })\n    return result;\n  }\n\n  const reposToPreload = useRef();\n  const currentlyLoadingIndex = useRef();\n\n  const [loadProgress, setLoadProgress] = useState(0);\n  const [finishedLoading, setFinishedLoading] = useState(false);\n  const [reposLoaded, setReposLoaded] = useState([]);\n  const [errors, setErrors] = useState([]);\n\n  const handleButtonClick = () => {\n    setErrors([]);\n  }\n\n  const getProgressBarVariant = () => {\n    if (finishedLoading && errors.length > 0) {\n      return \"warning\"\n    }\n    \n    return \"success\"\n  }\n\n  const getSecondaryHeaderMessage = () => {\n    if (finishedLoading && errors.length > 0) {\n      return \"Error loading repos\"\n    }\n\n    if (reposToPreload.current === undefined) {\n      return \"\"\n    }\n\n    return reposToPreload.current[currentlyLoadingIndex.current].username + \"/\" + reposToPreload.current[currentlyLoadingIndex.current].repo;\n  }\n\n  const loadStargazers = async () => {\n    let repoToPreload = reposToPreload.current[currentlyLoadingIndex.current];\n\n    try {\n      let stargazerData = await stargazerLoader.loadStargazers(\n        repoToPreload.username, \n        repoToPreload.repo, \n        (progress) => setLoadProgress(progress),\n        () => false);\n\n      setReposLoaded([...reposLoaded, stargazerData]);\n    }\n    catch(error) {\n      setErrors([...errors, { repoDetails: repoToPreload, message: error.message }]);\n    }\n\n    currentlyLoadingIndex.current = currentlyLoadingIndex.current + 1;\n  }\n\n  useEffect(() => {\n    reposToPreload.current = parseUrlParams();\n    if (reposToPreload.current.length > 0) {\n      currentlyLoadingIndex.current = 0;\n      loadStargazers();\n    }\n    else {\n      setFinishedLoading(true);\n      setLoadProgress(100);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (reposLoaded.length > 0 || errors.length > 0) {\n      if (currentlyLoadingIndex.current < reposToPreload.current.length) {\n        loadStargazers();\n      }\n      else {\n        setFinishedLoading(true);\n        setLoadProgress(100);\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [reposLoaded, errors]);\n\n  return (\n    <div>\n      { finishedLoading === false || errors.length > 0 ? \n        <Container className=\"RepoPreloader-topContainer\">\n          <h3 >Loading Repos Data...</h3>\n          <h5>{getSecondaryHeaderMessage()}</h5>\n          <ProgressBar className=\"RepoPreloader-ProgressBar-Reseting\" now={loadProgress} variant={getProgressBarVariant()} animated />\n          { errors.length > 0 ?\n          <Container className=\"RepoPreloader-errorContainer\">\n            {errors.map(error => <h6><b>Error loading {error.repoDetails.username}/{error.repoDetails.repo}:</b> {error.message}</h6>)}\n            {finishedLoading ? <Button onClick={handleButtonClick}>Continue</Button> : null }\n          </Container>\n          : null }\n        </Container> \n      :\n        <MainPage preloadedRepos={reposLoaded}/>\n      }\n    </div>\n  )\n\n}\n\nexport default RepoPreloader","import ReactGA from 'react-ga';\n\nfunction initializeGoogleAnalytics() {\n    ReactGA.initialize(\"UA-104097715-1\");\n    ReactGA.pageview(window.location.pathname + window.location.search);\n}\n\nexport default initializeGoogleAnalytics;","import React from 'react';\nimport MainPage from './MainPage'\nimport RepoPreloader from './RepoPreloader'\nimport { Route, HashRouter } from 'react-router-dom'\nimport initializeGoogleAnalytics from '../utils/GATrack'\n\nconst App = () => {\n  return (\n    <HashRouter>\n      <Route exact path=\"/\" component={MainPage} />\n      <Route path=\"/preload\" component={RepoPreloader} />\n    </HashRouter>\n  );\n}\n\ninitializeGoogleAnalytics();\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}